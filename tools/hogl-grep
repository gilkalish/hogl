#!/usr/bin/env python3
#

# Copyright (c) 2015-2020 Max Krasnyansky <max.krasnyansky@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# hogl-grep takes grep-like options and hogl text log and output
# new records with the time diff in parenthesis corresponds to the
# actual grepped records rather the original timediff.

import sys, argparse, subprocess, re

#
# Typical hogl::format_basic log records look like this:
#    01451508993.696685263 (257) AREA:DEBUG some message here
#    01451508993.696685263 AREA:DEBUG some message here
#
# 01451508993.696685263 is in seconds.nanoseconds
# (257) is a delta nanoseconds

ts_fmt = [
    re.compile('^([0-9]*.[0-9]*) \([0-9]*\) (.*)'),
    re.compile('^([0-9]*\.[0-9]*) (.*)') ]

ts_last = 0

def process_rec(rec, out):
    global ts_last

    for tf in ts_fmt:
        m = tf.match(rec)
        if m: break

    if m is None:
        print('invalid timestamp [ {} ]'.format(rec))
        sys.exit(1)

    ts = int(float(m.group(1)) * 1000000000) # to nsec
    if ts_last == 0:
        ts_last = ts

    out.write('{} ({}) {}\n'.format(m.group(1), ts - ts_last, m.group(2)))
    ts_last = ts
    return True

if __name__=='__main__':
    parser = argparse.ArgumentParser(
            description = 'grep based tool for recomputing timestamp deltas ',
            usage = 'hogl-grep [options] [--] [grep-options] <pattern> [input log files]' )
    parser.add_argument('-g', '--grep',   default='/bin/grep', help='path to grep exec')
    parser.add_argument('-o', '--output',   help='output log file')
    parser.add_argument('input', nargs='+', help='input log file(s)')

    args = parser.parse_args()

    if not len(args.input):
        parser.print_help()
        sys.exit(1)

    # Open log output file
    out = sys.stdout
    if args.output:
        out = open(args.output, 'wb')

    # Filter log file using external grep.
    # 'grep' is much faster at this.
    # Iterate over log records (one line at a time)

    if (sys.version_info.major, sys.version_info.minor) > (3,6):
       grep = subprocess.Popen([args.grep] + args.input, stdin=None, text=True, stdout=subprocess.PIPE, bufsize=1)
       while True:
           rec = grep.stdout.readline()
           if rec == '': break
           process_rec(rec, out)
    else:
       grep = subprocess.Popen([args.grep] + args.input, stdin=None, stdout=subprocess.PIPE, bufsize=1)
       while True:
           rec = grep.stdout.readline().decode()
           if rec == '': break
           process_rec(rec, out)

    sys.exit(0)
